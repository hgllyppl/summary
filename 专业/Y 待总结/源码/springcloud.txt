# RPC
FeignClientsRegistrar/FeignClientFactoryBean
FeignAutoConfiguration
  FeignContext/FeignClientsConfiguration
FeignRibbonClientAutoConfiguration
  DefaultFeignLoadBalancedConfiguration

# 负责均衡
RibbonAutoConfiguration
RibbonEurekaAutoConfiguration/EurekaRibbonClientConfiguration
SpringClientFactory/RibbonClientConfiguration

# 服务注册与发现
芋道源码 http://www.iocoder.cn/categories/Eureka/
eureka-client(EurekaClientAutoConfiguration/EurekaAutoServiceRegistration)
init
  DiscoveryClient
back
  AsyncResolver
    -> 刷新eureka地址
  InstanceInfoReplicator
    -> discoveryClient.refreshInstanceInfo()
         -> applicationInfoManager.refreshDataCenterInfoIfRequired()
         -> applicationInfoManager.refreshLeaseInfoIfRequired()
         -> status = getHealthCheckHandler().getStatus(instanceInfo.getStatus())
         -> IFNN status THEN
              -> applicationInfoManager.setInstanceStatus(status);
    -> IF dirty THEN
         -> discoveryClient.register()
         -> instanceInfo.unsetIsDirty(dirtyTimestamp)
exec
  DiscoveryClient.register/renew/fetchRegistry
    -> 注册时使用appName作为key

eureka-server(EurekaServerAutoConfiguration/EurekaServerInitializerConfiguration)
EurekaServerAutoConfiguration
  -> jerseyFilterRegistration()
       -> bean.setFilter(new ServletContainer(eurekaJerseyApp))
            此处植入filter并拦截所有以/eureka开头的请求
            com.sun.jersey.spi.container.servlet.ServletContainer extends HttpServlet implements Filter
       -> bean.setUrlPatterns(/eureka/*)
  -> traceFilterRegistration()
  -> peerAwareInstanceRegistry()
       -> deltaRetentionTimer.schedule()
  -> peerEurekaNodes()
  -> eurekaServerContext()
  -> eurekaServerBootstrap()

DefaultEurekaServerContext
  -> initialize()
       -> peerEurekaNodes.start()
            -> taskExecutor.scheduleWithFixedDelay[Eureka-PeerNodesUpdater]
                -> updatePeerEurekaNodes(resolvePeerUrls())
                     -> createPeerEurekaNode
       -> registry.init(peerEurekaNodes)
            -> numberOfReplicationsLastMin.start()
            -> initializedResponseCache()
                 -> new ResponseCacheImpl()
            -> scheduleRenewalThresholdUpdateTask()
                 -> timer.schedule()[RenewalThresholdUpdater]
            -> initRemoteRegionRegistry()
  -> shutdown()

PeerEurekaNode
  -> PeerEurekaNode()
       -> set registry/targetHost/replicationClient/serviceUrl/config/maxProcessingDelayMs
       -> new ReplicationTaskProcessor(targetHost, replicationClient)
       -> init batchingDispatcher/nonBatchingDispatcher
            -> new AcceptorExecutor<>()
                 -> init acceptorThread
            -> new TaskExecutors<>(new WorkerRunnableFactory<ID, T>())
                 -> init workerThreads
            -> new TaskDispatcher<ID, T>(AcceptorExecutor, TaskExecutors)

ResponseCacheImpl
  -> ResponseCacheImpl()
       -> set serverConfig/serverCodecs/shouldUseReadOnlyResponseCache/registry
       -> init readWriteCacheMap
            -> generatePayload(key)
       -> IF shouldUseReadOnlyResponseCache THEN timer.schedule(getCacheUpdateTask())[Eureka-CacheFillTimer]

EurekaServerInitializerConfiguration implements SmartLifecycle
  -> start -> eurekaServerBootstrap.contextInitialized()
       -> initEurekaEnvironment
            -> set dataCenter/environment
       -> initEurekaServerContext
            -> registry.syncUp()
                 -> register app from other PeerEurekaNode
            -> registry.openForTraffic(this.applicationInfoManager, registryCount)
                 -> init expectedNumberOfRenewsPerMin & numberOfRenewsPerMinThreshold
                 -> super.postInit()
                      -> renewsLastMin.start()
                      -> evictionTimer.schedule()
            -> EurekaMonitors.registerAllStats()
  -> stop -> eurekaServerBootstrap.contextDestroyed()

InstanceRegistry.register/renew/cancel
  -> register
       -> publishEvent(new EurekaInstanceRegisteredEvent(this, info, leaseDuration, isReplication)
       -> super.register(info, leaseDuration, isReplication)
            -> reset leaseDuration
            -> super.register(info, leaseDuration, isReplication)
                 -> update registry/recentlyChangedQueue
                      -> 使用appName作为key
                 -> invalidateCache
                 -> and more...
            -> replicateToPeers(Action.Register, info.getAppName(), info.getId(), info, null, isReplication)
                 -> IF ... THEN ITER peerEurekaNodes & node.cancel/heartbeat/register/statusUpdate/deleteStatusOverride

# FAQ
bean初始化时在init方法里面提前进行了rpc调用，现象是ribbon配置没有生效，原因是netflix全局使用了一个静态的资源配置，而这个静态配置还没有被spring注入

微服务注册中心Eureka架构深入解读
https://www.infoq.cn/article/jlDJQ*3wtN2PcqTDyokh

防雪崩利器：熔断器 Hystrix 的原理与使用 - 编程随笔 - SegmentFault 思否
https://segmentfault.com/a/1190000005988895